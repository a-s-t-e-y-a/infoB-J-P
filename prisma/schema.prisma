// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  name          String
  phoneNumber   String
  dob           String
  password      String
  posts         Post[]
  mundals       Mundal[]
  sectors       Sector[]
  poolingBooths PoolingBooth[]
  karyakartas   Karyakarta[]
  villages      Village[]
  galleries     Gallery[]
}

model Gallery {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  published Boolean
  image     String?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Mundal {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  author        User           @relation(fields: [authorId], references: [id])
  authorId      String         @db.ObjectId
  name          String
  karyakartas   Karyakarta[]
  sectors       Sector[]
  villages      Village[]
  poolingBooths PoolingBooth[]
}

model Sector {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  author      User         @relation(fields: [authorId], references: [id])
  authorId    String       @db.ObjectId
  mundal      Mundal?      @relation(fields: [mundalId], references: [id], onDelete: Cascade)
  mundalId    String?      @db.ObjectId
  karyakartas Karyakarta[]
  villages    Village[]
}

model Village {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  author        User           @relation(fields: [authorId], references: [id])
  authorId      String         @db.ObjectId
  sector        Sector?        @relation(fields: [sectorId], references: [id])
  sectorId      String?        @db.ObjectId
  mundal        Mundal?        @relation(fields: [mundalId], references: [id], onDelete: Cascade)
  mundalId      String?        @db.ObjectId
  poolingBooths PoolingBooth[]
}

model PoolingBooth {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  village     Village?     @relation(fields: [villageId], references: [id], onDelete: Cascade)
  villageId   String?      @db.ObjectId
  karyakartas Karyakarta[]
  author      User         @relation(fields: [authorId], references: [id])
  authorId    String       @db.ObjectId
  mundal      Mundal?      @relation(fields: [mundalId], references: [id], onDelete: Cascade)
  mundalId    String?      @db.ObjectId
}

model Karyakarta {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  address         String
  mobileNumber    String
  dob             String
  religion        String
  gender          String
  previousParty   String?       @default("None")
  mundal          Mundal?       @relation(fields: [mundalId], references: [id], onDelete: Cascade)
  mundalId        String?       @db.ObjectId
  sector          Sector?       @relation(fields: [sectorId], references: [id])
  sectorId        String?       @db.ObjectId
  poolingBooth    PoolingBooth? @relation(fields: [poolingBoothId], references: [id])
  poolingBoothId  String?       @db.ObjectId
  role            Role          @default(karyakarta)
  author          User          @relation(fields: [authorId], references: [id])
  authorId        String        @db.ObjectId
}

enum Role {
  karyakarta
  adhyaksha
  koshadhyaksha
  mahamantri
  mantri
  upaadhyaksha
  adhyakshaBooth
  shaktikendraSanyojak
  shaktikendraprabhari
}